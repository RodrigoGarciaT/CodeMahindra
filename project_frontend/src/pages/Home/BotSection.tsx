import React, { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import type { Bot as BotType } from "../BotStore/Page";

const botImage = new URL("../../images/robot_male_1.svg", import.meta.url).href;

const expressions = [
  "Hi! ü§ñ", "Yay! üéâ", "?!", ":D", "!!", "Hehe üòÑ", "<3 ‚ù§Ô∏è", "Oof üòÖ", "Bzzt! ‚ö°", "Uh? ü§î", "*blip*", "+1 üëç", "Hey!", "Yo!", "Woop! üôå",
  ":O üò≤", "Eep!", "Ping!", "Zzz üí§", "!", "Boop", "?", ":3", "Ok!", "Ack!", "Wee!", "Woo!", "Yup!", "Bam! üí•", "Ding!", "Nom! üç™", "Bloop!", "...",
  "Aha!", "Omg! üò±", "O.o", ":)", "Nah", "Yep", "Oops!", "Yikes! üò¨", "Huh", "Yo!", "Ssshh ü§´", "Cool üòé", "Bip!", "Gone! üõ∏", "Zoom!", "Yeehaw! ü§†",
  "Wow! ü§©", "Nice! üòé", "Glitch? ü§ñ", "Wait! ‚è≥", "Flyin'! üõ´", "Spin! üåÄ", "Boom! üí£", "Pop! üéà", "Eek!", "Pow! üí¢", "Whoosh! üå™Ô∏è", "Shiny! ‚ú®", "Brrr! ‚ùÑÔ∏è",
  "Kaboom! üí•", "Zap! ‚ö°", "Meep! ü§ñ", "Nyoom! üöÄ", "Blink! üí´",
  "Analyzing PR... üîç", "Running tests... üß™", "Merging commits... üîß", "Review ready! ‚úÖ",
  "Leveling up... üî∫", "Ranking updated! üèÜ", "Solving problem... üí°", "Task in progress... üìù",
  "Refactor mode! ‚ôªÔ∏è", "Syntax clean! üßº", "Clean code vibes ‚ú®", "XP gained! üß†", "Review bot engaged ü§ñ",
  "Challenge accepted! üß©", "Let's code! üë®‚Äçüíª", "Evaluating AI feedback... ü§ì", "New badge unlocked! ü•á",
  "Retro incoming üîÅ", "Commit digest ready üì¶", "Diff loaded ü™Ñ", "Rewriting history... ‚åõ",
  "Error? Never heard of it üõ°Ô∏è", "Target acquired üéØ", "Deploying suggestions... üöÄ",
  "JIRA synced üìã", "One more PR! üôå", "Refactor complete üíÖ", "Rank climbing ‚õ∞Ô∏è",
  "Checklist complete ‚úÖ", "Ship it! üö¢", "Pull request approved üëç", "XP overflow! üìà",
  "Unit tests pass! ‚úîÔ∏è", "Red to green üü©", "Code smells detected üëÉ", "Fixing issues... üõ†Ô∏è",
  "Achievement unlocked! üèÖ", "Just another sprint üèÉ‚Äç‚ôÇÔ∏è", "Feedback loop active üîÅ",
  "Merge conflict? Nah üòé", "Push complete üß®", "Awaiting approval üîí", "Branch dancing üåø",
  "Learning mode: ON üìö", "Analyzing diff... üß†", "Code Mahindra at your service ü§ñ",
  "Retro sent! üìÆ", "New insight! üåü", "Optimizing... ‚è±Ô∏è", "Debugger launched ü™≤",
  "Another challenge? Bring it! üí™", "Autofix magic üßô", "Score boosted! üî¢", "Queueing review... üõ§Ô∏è",
  "Night shift coder üåô", "Mahindra scanning üëÅÔ∏è", "Ranking you up... ‚¨ÜÔ∏è", "Patch incoming üßµ",
  "Cool commit üòé", "Status: Reviewing üîç", "Feedback initialized üí¨", "XP loaded! ‚ö°"
];

type Props = {
  equippedBot: BotType | null;
  purchasedBot: BotType | null;
};

const BotSection: React.FC<Props> = ({ equippedBot, purchasedBot }) => {
  const navigate = useNavigate();
  const currentBot = equippedBot || purchasedBot;

  useEffect(() => {
    const interval = setInterval(() => {
      const chance = Math.random();
      const expression = expressions[Math.floor(Math.random() * expressions.length)];

      if (chance < 0.6) {
        setDialogue(expression);

        // Espera 2s y empieza a desvanecer
        setTimeout(() => {
          const bubble = document.querySelector(".dialogue-bubble");
          if (bubble) {
            (bubble as HTMLElement).classList.add("fade-out");
          }

          // Luego de desvanecer, elimina el di√°logo
          setTimeout(() => {
            setDialogue(null);
          }, 600); // igual a duraci√≥n del fade-out
        }, 2000);
      }

      if (chance < 0.2) {
        setAnimationClass("bot-bounce");
        setTimeout(() => setAnimationClass("bot-animate-fun"), 1500);
      } else if (chance < 0.4) {
        setAnimationClass("bot-twirl");
        setTimeout(() => setAnimationClass("bot-animate-fun"), 2000);
      } else {
        setAnimationClass("bot-pulse");
        setTimeout(() => setAnimationClass("bot-animate-fun"), 2000);
      }
    }, 6000);

    return () => clearInterval(interval);
  }, []);

  const botRef = useRef<HTMLImageElement>(null);
  const [dialogue, setDialogue] = useState<string | null>(null);
  const [animationClass, setAnimationClass] = useState("bot-animate-fun");

  useEffect(() => {
    const interval = setInterval(() => {
      const chance = Math.random();
      const expression = expressions[Math.floor(Math.random() * expressions.length)];

      if (chance < 0.6) setDialogue(expression);

      if (chance < 0.2) {
        setAnimationClass("bot-bounce");
        setTimeout(() => setAnimationClass("bot-animate-fun"), 1500);
      } else if (chance < 0.4) {
        setAnimationClass("bot-twirl");
        setTimeout(() => setAnimationClass("bot-animate-fun"), 2000);
      } else {
        setAnimationClass("bot-pulse");
        setTimeout(() => setAnimationClass("bot-animate-fun"), 2000);
      }

      if (chance < 0.8) {
        setTimeout(() => setDialogue(null), 2800);
      }
    }, 6000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div
      className="bg-[#1e1e1e] border border-[#2e2e2e] text-white rounded-2xl p-6 shadow-md hover:shadow-lg transition cursor-pointer relative overflow-hidden"
      onClick={() => navigate("/bot-store")}
    >
      <h2 className="text-xl font-bold text-center mb-4">{currentBot?.name || "Mahindra Bot"}</h2>

      <div className="flex flex-col items-center justify-center relative">
        {/* üí¨ Di√°logo */}
        {dialogue && (
          <div className="dialogue-bubble animate-fade-in-out">
            <div className="bubble-text">üí¨ {dialogue}</div>
            <div className="bubble-tail" />
          </div>
        )}

        {/* ü§ñ Imagen del bot */}
        <img
          ref={botRef}
          src={currentBot?.image || botImage}
          alt="Bot"
          className={`w-28 h-28 object-contain ${animationClass} bot-trail`}
          draggable={false}
        />

        {/* ‚ÑπÔ∏è Descripci√≥n */}
        {currentBot && (
          <>
            <p className="text-sm text-gray-300 mt-4 text-center max-w-xs bg-[#2a2a2a] px-3 py-2 rounded-lg border border-[#3a3a3a]">
              {currentBot.description}
            </p>
            <p className={`mt-2 text-xs font-semibold ${equippedBot ? "text-green-400" : "text-gray-500"}`}>
              {equippedBot ? "Equipped" : "Not Equipped"}
            </p>
          </>
        )}
      </div>

      {/* üé® Estilos */}
      <style>{`
        @keyframes floatRotatePlay {
          0% { transform: translateY(0) rotate(0deg); }
          50% { transform: translateY(-5px) rotate(3deg); }
          100% { transform: translateY(0) rotate(0deg); }
        }

        .bot-animate-fun {
          animation: floatRotatePlay 6s ease-in-out infinite;
        }

        @keyframes bot-bounce {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-10px); }
        }

        .bot-bounce {
          animation: bot-bounce 1.5s ease-in-out;
        }

        @keyframes bot-twirl {
          0% { transform: rotate(0); }
          100% { transform: rotate(720deg); }
        }

        .bot-twirl {
          animation: bot-twirl 2s ease-in-out;
        }

        @keyframes fadeInOut {
          0% { opacity: 0; }
          10% { opacity: 1; }
          90% { opacity: 1; }
          100% { opacity: 0; }
        }

        .animate-fade-in-out {
          animation: fadeInOut 2.6s ease-in-out;
        }

        @keyframes pulseAura {
          0% {
            box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.5);
          }
          70% {
            box-shadow: 0 0 20px 10px rgba(255, 0, 0, 0);
          }
          100% {
            box-shadow: 0 0 0 0 rgba(255, 0, 0, 0);
          }
        }

        .bot-pulse {
          animation: pulseAura 2s ease-out;
          border-radius: 50%;
        }

        .bot-trail {
          filter: drop-shadow(0 0 4px rgba(255, 0, 0, 0.5));
        }

        .dialogue-bubble {
          position: absolute;
          top: -30px;
          left: 50%;
          transform: translateX(-50%);
          display: flex;
          flex-direction: column;
          align-items: center;
          z-index: 10;
        }

        .bubble-text {
          background: #ffffff;
          color: #111;
          padding: 6px 12px;
          border-radius: 12px;
          font-size: 0.75rem;
          font-weight: bold;
          white-space: nowrap;
          max-width: 220px;
          box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .bubble-tail {
          width: 0;
          height: 0;
          border-left: 6px solid transparent;
          border-right: 6px solid transparent;
          border-top: 6px solid #ffffff;
          margin-top: -1px;
        }
        .fade-out {
          opacity: 0;
          transition: opacity 0.6s ease-in-out;
        }
      `}</style>
    </div>
  );
};

export default BotSection;
